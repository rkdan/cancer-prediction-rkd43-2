{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#packaging-and-publishing-python-software-for-research","title":"Packaging and publishing python software for research","text":"<p>Welcome to the material on packaging and publishing python software.</p> <p>There are three branches to this repo:</p> <ul> <li><code>main</code> contains the slides and starting code, plus some details about how to work through the material.</li> <li><code>basic</code> contains the basic starting code, and nothing else.</li> <li><code>result</code> contains the final product, that you should hopefully put together yourself.</li> </ul> <p>At the bottom of each section, you will find some further resources on the concepts discussed within.</p>"},{"location":"#sections","title":"Sections","text":"<ul> <li> <p> Setting up</p> <p>Setting up your GitHub repo and Codespace</p> </li> <li> <p> Project overview</p> <p>An overview of the project - moving from Jupyter Notebooks to python scripts</p> </li> <li> <p> Poetry</p> <p>An introduction to the power of Poetry</p> </li> <li> <p> Testing</p> <p>How to test your package</p> </li> <li> <p> Publishing</p> <p>Publishing to PyPI and making documentation with MkDocs</p> </li> <li> <p> CI/CD</p> <p>How to automate the everything!</p> </li> </ul> <ul> <li> <p> Slides</p> <p>Here you can find the slides for the course material</p> </li> </ul> <ul> <li> <p> Resources</p> <p>Each section contains a summary of further resources, but here they are all collected for convenience</p> </li> </ul>"},{"location":"1_setting_up/","title":"Setting up","text":""},{"location":"1_setting_up/#setting-up-codespaces","title":"Setting up Codespaces","text":"<p>The first step is to create a new repository in your GitHub called <code>cancer-prediction</code>. Now head over to the <code>accelerate/packaging-publishing</code> repo, switch to the basic branch, and download a zip of the code.</p> <p>Now head back over to your newly created repo and open Codespaces:</p> <p></p> <p>You should now be in the browser version of VSCode. Unzip the folder you just downloaded, and drag it into the VSCode file explorer.</p> <p>This is the absolute most basic version of code being submitted to GitHub. But we can do better...</p> <p>Note</p> <p>Even though we are using Codespaces, the general packaging process will still work with regular VSCode on your desktop.</p>"},{"location":"1_setting_up/#create-a-new-branch","title":"Create a new branch","text":"<p>It is good practice to do development work on a new branch, but first we should set up a virtual environment and install any dependencies.</p> <p>Set up the new virtual environment with, <pre><code>python3.10 -m venv venv\n. venv/bin/activate\n</code></pre></p> <p>You can verify the path of the python version you are using by running <pre><code>which python\n</code></pre> and this should return something like:\\  <code>/workspaces/cancer-prediction/venv/bin/python</code></p> <p>We install the dependencies using <pre><code>python -m pip install -r requirements.txt\n</code></pre></p> <p>Notice that in the version control tab, we have over 1,000 unstaged changes!! If we have a look at these, they are mostly files from the virtual environment. We do NOT want to push these to our repo. So we create the three core files we need: a <code>.gitignore</code>, a <code>LICENSE</code>, and a <code>README.md</code>, either using the UI or by typing in the terminal:</p> <pre><code>touch .gitignore LICENSE README.md\n</code></pre> <p>and populate it with boiler plate text. If you have Copilot, it will do it for you, or you can copy the one here.</p> <p>Once you update, all the additional files should vanish from the staging area. Once this is done, commit the changes, and sync the remote version with the local version.</p> <p>Now create a new branch using the UI or using the git CLI. <pre><code>git checkout -b dev\n</code></pre></p> <p>This will automatically create and move over to a new branch called <code>dev</code>. The environment and all the packages we installed should also be moved along with it.</p> <p>In the source control tab, hit \"Publish Branch\".</p>"},{"location":"1_setting_up/#further-reading","title":"Further reading","text":"<ul> <li> <p> Set up resources</p> <p>Information on Git/GitHub, Codespaces, VSCode</p> </li> </ul>"},{"location":"2_project_overview/","title":"Project overview","text":""},{"location":"2_project_overview/#an-overview-of-the-project","title":"An overview of the project","text":"<p>Deploying Jupyter notebooks either to production environments or for large scale simulations or machine learning optimization is impractical. Instead, it makes sense to convert all of our notebook code into python scripts. The end goal is to be able to run our code from the command line, or import the code into other python scripts or notebooks.</p> <p>In general, when writing code in Notebooks, you should still stick to good programming habits: use appropriate variable names; write functions and classes where appropriate; document those classes and functions; add comments where appropriate. We should aim to have self-documenting code - i.e. it should be obvious what a particular function does, and comments are only added when absolutely needed to provide clarity.</p> <p>The overall structure of this project initially should look like this: <pre><code>cancer-prediction\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 breast_cancer_test.csv\n\u2502   \u251c\u2500\u2500 breast_cancer_train.csv\n\u2502   \u2514\u2500\u2500 breast_cancer.csv\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 cancer_model.pkl\n\u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 cancer_model.py\n\u2502   \u2514\u2500\u2500 streamlit_app.py\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 notebook.ipynb\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre></p> <p>Have a look through the <code>notebook.ipynb</code> file. It is a basic starting point for a simple ML pipeline to perform cancer prediction.</p>"},{"location":"2_project_overview/#the-transition-from-notebooks-to-python-files","title":"The transition from notebooks to python files","text":"<p>The goal is to package up this notebook into a form that can achieve two things:</p> <ol> <li>It can be run from the command line with simple commands. If our software is quite complicated and we need to write slurm scripts to run them on the HPC, this can be handy.</li> <li>It needs to be importable so others can build on top of it easily.</li> </ol> <p>Let's look at the files:</p>"},{"location":"2_project_overview/#cancer_modelpy","title":"<code>cancer_model.py</code>","text":"<p>Here we have taken the most important parts of our notebook and constructed a <code>CancerModel</code> class. It will automatically perform hyperparameter optimization and fit the best model, as well as saving it. We also have the option to load a saved model, make predictions and get feature importances.</p> Click to see the code <pre><code>import warnings\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nwarnings.filterwarnings('ignore')\n\nimport pickle\n\n\nclass CancerModel:\n    \"\"\"A class to represent a cancer diagnosis prediction model.\n    \"\"\"\n    def __init__(self):\n        self.model = None\n        self.pca = None\n        self.scaler = None\n        self.feature_names = None\n\n\n    def __str__(self) -&gt; str:\n        return 'CancerModel'\n\n\n    def fit(self, X : np.ndarray | pd.DataFrame, y : np.ndarray | pd.DataFrame) -&gt; None:\n        \"\"\"Fit the model to the given data.\n\n        Args:\n            X (np.ndarray | pd.DataFrame): The features\n            y (np.ndarray | pd.DataFrame): The diagnosis target\n        \"\"\"\n        pipe = Pipeline([\n            ('scaler', StandardScaler()),\n            ('pca', PCA()),\n            ('model', LogisticRegression())\n        ])\n\n        param_grid = {\n            'pca__n_components': np.arange(1, 31),\n            'model__C': np.logspace(-3, 1, 100)\n        }\n\n        grid = GridSearchCV(pipe, param_grid, cv=5, n_jobs=-1, scoring='accuracy', verbose=1)\n        grid.fit(X, y)\n\n        self.model = grid.best_estimator_\n        self.model.fit(X, y)\n        self.pca = self.model.named_steps['pca']\n        self.scaler = self.model.named_steps['scaler']\n        self.feature_names = self.model.feature_names_in_\n\n\n    def save(self, path: str) -&gt; None:\n        \"\"\"Save the model to the given path.\n\n        Args:\n            path (str): The path to save the model to.\n        \"\"\"\n        # unsure that feature_names can be retrieved after loading the model\n        with open(path, 'wb') as file:\n            pickle.dump(self.model, file)\n\n\n    def load(self, path: str) -&gt; None:\n        \"\"\"Load the model from the given path.\n\n        Args:\n            path (str): The path to load the model from.\n        \"\"\"\n        with open(path, 'rb') as file:\n            self.model = pickle.load(file)\n            self.pca = self.model.named_steps['pca']\n            self.scaler = self.model.named_steps['scaler']\n            self.feature_names = self.model.feature_names_in_\n\n\n    def target_to_diagnosis(self, target: int) -&gt; str:\n        \"\"\"Convert the target to a diagnosis.\n\n        Args:\n            target (int): The target value (0 or 1)\n\n        Returns:\n            str: The diagnosis (Malignant or Benign)\n        \"\"\"\n        return 'Malignant' if target == 0 else 'Benign'\n\n\n    def diagnosis_to_target(self, diagnosis: str) -&gt; int:\n        \"\"\"Convert the diagnosis to a target.\n\n        Args:\n            diagnosis (str): The diagnosis (Malignant or Benign)\n\n        Returns:\n            int: The target value (0 or 1)\n        \"\"\"\n        return 0 if diagnosis == 'Malignant' else 1\n\n\n    def predict(self, X: np.ndarray | pd.DataFrame) -&gt; list[tuple[str, float]]:\n        \"\"\"Make a prediction for the given features.\n\n        Args:\n            X (np.ndarray | pd.DataFrame): The features\n\n        Returns:\n            list[tuple[str, float]]: A list of tuples containing the diagnosis and the confidence\n        \"\"\"\n        predictions = self.model.predict(X)\n        diagnoses = [self.target_to_diagnosis(p) for p in predictions]\n        probs = self.model.predict_proba(X)\n        # get the corresponding probabilities\n        diagnoses_confidence = []\n        for i, pred in enumerate(predictions):\n            diagnosis = diagnoses[i]\n            prob = round(probs[i][pred], 2)\n            diagnoses_confidence.append((diagnosis, prob))\n\n        return diagnoses_confidence\n\n\n    def predict_proba(self, X: np.ndarray | pd.DataFrame) -&gt; np.ndarray:\n        \"\"\"Make a prediction for the given features.\n\n        Args:\n            X (np.ndarray | pd.DataFrame): The features\n\n        Returns:\n            np.ndarray: The probabilities of the predictions\n        \"\"\"\n        return self.model.predict_proba(X)\n\n\n    def accuracy(self, X: np.ndarray | pd.DataFrame, y: np.ndarray | pd.DataFrame) -&gt; float:\n        \"\"\"Calculate the accuracy of the model on the given data.\n\n        Args:\n            X (np.ndarray | pd.DataFrame): The features\n            y (np.ndarray | pd.DataFrame): The diagnosis target\n\n        Returns:\n            float: The accuracy of the model\n        \"\"\"\n        return self.model.score(X, y)\n\n\n    def get_feature_importance(self):\n        return self.pca.components_\n\n\n    def get_feature_variance(self):\n        return self.pca.explained_variance_ratio_\n\n\n    def get_feature_importance_df(self, X):\n        feature_importance = self.get_feature_importance()\n        feature_variance = self.get_feature_variance()\n\n        feature_importance_df = pd.DataFrame(feature_importance, columns=self.feature_names)\n        feature_importance_df['variance'] = feature_variance\n        return feature_importance_df\n\n\n    def get_feature_importance_df_sorted_by_variance_and_variance(self, X):\n        feature_importance_df = self.get_feature_importance_df(X)\n        return feature_importance_df['variance'].sort_values(ascending=False)\n</code></pre> <p>People who want to build on this model would be able to import this and this alone.</p>"},{"location":"2_project_overview/#streamlit_apppy","title":"<code>streamlit_app.py</code>","text":"<p>This is a basic user interface (UI) that builds a basic frontend for the model. I highly recommend streamlit as a way to quickly prototype applications.</p> Click to see the code <pre><code>import os\nimport pickle\n\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\nfrom cancer_model import CancerModel\n\nst.set_page_config(page_title='Cancer Diagnosis Prediction', layout='wide')\n\nMODELS_DIR = 'models'\n\ndef list_saved_models(directory):\n    \"\"\"List all '.pkl' files in the given directory.\"\"\"\n    return [file for file in os.listdir(directory) if file.endswith('.pkl')]\n\n@st.cache_resource\ndef load_model(path='cancer_model.pkl') -&gt; CancerModel:\n    model = CancerModel()\n    model.load(path)\n    return model\n\ndef train_and_save_model(train_data, filename='cancer_model.pkl'):\n    model = CancerModel()\n    filename = os.path.join(MODELS_DIR, filename)\n    X = train_data.drop('target', axis=1)\n    y = train_data['target']\n    model.fit(X, y)\n    # Ensure the directory exists\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    model.save(filename)\n    return model\n\nst.title('Cancer Diagnosis Prediction')\n\n# Sidebar for navigation\napp_mode = st.sidebar.selectbox(\"Choose an option\", [\"Home\", \"Train a new model\", \"Load model and predict\", \"Manual data entry for prediction\"])\n\nif app_mode == \"Home\":\n    st.write(\"Welcome to the Cancer Diagnosis Prediction Application. Use the sidebar to navigate through the application.\")\n\nelif app_mode == \"Train a new model\":\n    st.header(\"Train a new model\")\n    uploaded_file = st.file_uploader(\"Upload your dataset (CSV format)\", type=\"csv\")\n    model_name = st.text_input(\"Enter a name for your model (without extension)\", value=\"cancer_model\")\n\n    if uploaded_file is not None and model_name:\n        data = pd.read_csv(uploaded_file)\n        if st.button('Train Model'):\n            # Append .pkl extension if not provided\n            if not model_name.endswith('.pkl'):\n                model_name += '.pkl'\n            train_and_save_model(data, model_name)\n            st.success(f'Model \"{model_name}\" trained and saved successfully.')\n\n\nif app_mode == \"Load model and predict\" or app_mode == \"Manual data entry for prediction\":\n    st.header(\"Select a model for prediction\")\n    model_files = list_saved_models(MODELS_DIR)\n    selected_model_file = st.selectbox(\"Select a model file\", model_files)\n    path = os.path.join(MODELS_DIR, selected_model_file)\n    model = load_model(path)\n\n    if app_mode == \"Load model and predict\":\n        uploaded_file = st.file_uploader(\"Upload your dataset for prediction (CSV format)\", type=\"csv\")\n        if uploaded_file is not None:\n            test_data = pd.read_csv(uploaded_file)\n            predictions, accuracy = model.predict(test_data.drop('target', axis=1)), model.accuracy(test_data.drop('target', axis=1), test_data['target'])\n            st.write(\"Predictions:\", predictions)\n            st.write(\"Accuracy:\", accuracy)\n\n    elif app_mode == \"Manual data entry for prediction\":\n        st.header(\"Manual data entry for prediction\")\n\n        # Define your features names here based on the model's training dataset\n        feature_names = model.feature_names  # Replace these with actual feature names\n\n        # Create a dictionary to store user inputs\n        input_data = {}\n\n        # Dynamically generate input fields for each feature\n        for feature in feature_names:\n            # You might want to customize the `step` parameter based on the feature's data type and expected range\n            input_data[feature] = st.number_input(f\"Enter {feature}:\", step=0.01)\n\n        if st.button('Predict'):\n            # Prepare the data for prediction (ensure it matches the model's expected input format)\n            input_df = pd.DataFrame([input_data])\n\n            # Perform the prediction\n            prediction = model.predict(input_df)\n\n            # Display the prediction result\n            st.write(f\"Prediction: {prediction[0][0]} with confidence: {prediction[0][1]}\")\n</code></pre>"},{"location":"2_project_overview/#apppy","title":"<code>app.py</code>","text":"<p>The part of the software that makes it possible to run the streamlit application from the command line. It is worth becoming familiar with Typer.</p> Click to see the code <pre><code>import sys\n\nimport typer\nfrom cancer_prediction import streamlit_app\nfrom streamlit.web import cli as stcli\n\napp = typer.Typer()\n\n@app.command()\ndef __version__():\n    # Print the version of the app\n    typer.echo(\"0.1.0\")\n\n@app.command()\ndef run():\n    sys.argv = [\"streamlit\", \"run\", \"cancer_prediction/streamlit_app.py\"]\n    sys.exit(stcli.main())\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>You can try out the app by running <code>streamlit run scripts/streamlit_app.py</code> in the command line.</p> <p>This code is now about as basic as you want to go. But notice that we have some problems:</p> <ul> <li>We can't run it from the command line (our CLI won't work).</li> <li>People can't import it.</li> <li>There is no testing.</li> <li>Although we have some dependencies, don't even know what version of python we are using!</li> </ul> <p>Let's start getting serious.</p>"},{"location":"2_project_overview/#further-reading","title":"Further reading","text":"<ul> <li> <p> Project overview resources</p> <p>Information on Scikit Learn, Streamlit, and Typer</p> </li> </ul>"},{"location":"3_poetry/","title":"Poetry","text":""},{"location":"3_poetry/#setting-up-poetry","title":"Setting up Poetry","text":"<p>We first need to install Poetry. The easiest way to do this is with <code>pipx</code>: <pre><code>pipx install poetry\n</code></pre> Your experience doing this with other operating systems may vary. Further details about installation can be found here.</p> <p>You can initialize a new project with poetry from scratch: <pre><code>poetry new my-project-name\n</code></pre> Typically you would do this from the start of your work.</p> <p>Or you might have some existing work and an environment that you might want to continue developing using poetry: <pre><code>poetry init\n</code></pre> Since we already have some code, we use the later option for this project. Running <code>poetry init</code> will involve having to run through some basic setup steps to define out config file.</p> <p><pre><code>Package name [packaging-publishing]:  cancer-prediction\nVersion [0.1.0]:  \nDescription []:  A basic model to predict cancerous tumors based on certain properties.\nAuthor [Ryan Daniels &lt;31715811+rkdan@users.noreply.github.com&gt;, n to skip]:  \nLicense []:  GPL-3.0-or-later\nCompatible Python versions [^3.10]:  \n\nWould you like to define your main dependencies interactively? (yes/no) [yes] yes\n</code></pre> We can then open the requirements file and just read them off. Do this for everything except <code>streamlit</code>. When we are asked to define development dependencies, we will add <code>black</code>, <code>isort</code>, and <code>flake8</code>. Confirm the generation, and that should create our <code>pyproject.toml</code>. We'll discuss this in more detail in the notes</p>"},{"location":"3_poetry/#file-structure","title":"File structure","text":"<p>Let's create the file directories according to the structure below. Don't worry if the order of the files and folders isn't the same. And don't worry about the additional files and folders that are just part of the course. <pre><code>packing-publishing\n\u251c\u2500\u2500 venv\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 cancer_model.pkl\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 breast_cancer_test.csv\n\u2502   \u251c\u2500\u2500 breast_cancer_train.csv\n\u2502   \u2514\u2500\u2500 breast_cancer.csv\n\u251c\u2500\u2500 cancer_prediction\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 cancer_model.py\n\u2502   \u2514\u2500\u2500 streamlit_app.py\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 notebook.ipynb\n</code></pre></p>"},{"location":"3_poetry/#licensing","title":"Licensing","text":"<p>We also need to populate the <code>LICENSE.md</code> file. You can find out the details of licensing here</p> <p>Warning</p> <p>If you do not include a license, nobody else can copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. If the work has other contributors, this includes YOU. The GitHub Terms of Service allow people to view or fork your code. </p> <p>Warning</p> <p>If software does not have a license, this generally means that you do not have permission to use, modify, or share the code. Forking and viewing code does not imply that you are permitted to use, modify or share it. Your best option is to nicely ask the authors to add a license, by either sending them an email, or opening an Issue on the repo.</p>"},{"location":"3_poetry/#adding-packages-to-your-poetry-environment","title":"Adding packages to your Poetry environment","text":"<p>Now let's add <code>streamlit</code> to our project. If you open the <code>pyproject.toml</code> file, you'll notice that there is a list of dependencies:</p> <pre><code>[tool.poetry.dependencies]\npython = \"^3.10\"\npandas = \"2.2.1\"\nscikit-learn = \"1.4.1.post1\"\nmatplotlib = \"3.8.3\"\nnumpy = \"1.26.4\"\n</code></pre> <p>If we want to add another package to our project, such as <code>streamlit</code>, we can just say, <pre><code>poetry add streamlit\n</code></pre></p> <p>Notice that now <code>streamlit</code> has appeared in <code>pyproject.toml</code>! Poetry has also created a file called <code>poetry.lock</code>. This file essentially locks in all of your dependencies so someone external can recreate your environment. It is somewhat analogous to the conda <code>environment.yml</code> file. Generally, we never alter this file manually.</p> <p>Commit and push your changes to the remote branch.</p>"},{"location":"3_poetry/#implement-the-cli-entry-point","title":"Implement the CLI entry point","text":"<p>Notice that the CLI will still not work in the way that we want it to. In order for the CLI to work, we have to make two alterations.</p> <p>Tip</p> <p>There are a few different libraries that will help you handle CLI. In this project, we use <code>typer</code>, but <code>argparse</code> is also a very popular one.</p>"},{"location":"3_poetry/#additions-to-the-code","title":"Additions to the code","text":"<p>At this point it is worth quickly going through the code for the <code>app.py</code> script. Click the arrows to find out what the code does.</p> <pre><code>import sys\n\nimport typer\nfrom cancer_prediction import streamlit_app  # (1)!\nfrom streamlit.web import cli as stcli     \n\napp = typer.Typer()  # (2)!\n\n@app.command()  # (3)!\ndef __version__():\n    typer.echo(\"0.1.0\")\n\n@app.command()  # (4)!\ndef run():\n    sys.argv = [\"streamlit\", \"run\", \"cancer_prediction/streamlit_app.py\"]\n    sys.exit(stcli.main())\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <ol> <li>Since this depends on the <code>streamlit_app.py</code> script, we have to import it here</li> <li>Initialize the typer app</li> <li>A command that prints out the version of the app</li> <li>A command that essentially mimics the <code>streamlit run cancer_prediction/streamlit_app.py</code> command that we used earlier</li> </ol> <p>We create a new folder inside <code>cancer_prediction</code> called <code>cli</code>. We also create a new <code>__init__.py</code> file and copy over the <code>app.py</code> file. The init file should contain only: <pre><code>from .app import app\n\n__all__ = [\"app\"]\n</code></pre></p> <p>We also need to add the <code>typer</code> library. Since this is a main dependancy, we can add it using the regular <code>poetry add</code> command.</p>"},{"location":"3_poetry/#additions-to-the-toml-file","title":"Additions to the <code>.toml</code> file","text":"<p>We want someone to be able to do: <pre><code>pip install cancer-prediction\n</code></pre></p> <p>and then <pre><code>cancer-prediction run\n</code></pre></p> <p>We have defined our <code>run</code> command, but your bash terminal will not recognize the command <code>cancer-prediction</code>! To do this, we first need to define an entry point. We add the following line to <code>pyproject.toml</code> below the readme: <pre><code>packages = [{include = \"cancer_prediction\"}]\n</code></pre></p> <p>Then we add the following lines <pre><code>[tool.poetry.scripts]\ncancer-prediction =  \"cancer_prediction.cli:app\"\n</code></pre></p> <p>This provides us with an entry point to the <code>cli/app.py</code> file. What is essentially says is: \"When I type the command <code>cancer-prediction</code> into my command line, what I really mean is execute this app.\"</p> <p>We then install a local copy of our package which mimics a pip installation: <pre><code>poetry install\n</code></pre></p> <p>We can now try it out by running <pre><code>cancer-prediction run\n</code></pre></p> <p>and the streamlit app should open! You should be able to play around with the app in the browser. In general, streamlit is a great way to prototype new applications. Try training a model using the training data - give it a name like <code>cancer_model_v2</code>. Then try running inference on this model with the testing data.</p>"},{"location":"3_poetry/#further-reading","title":"Further reading","text":"<ul> <li> <p> Poetry resources</p> <p>Information on Poetry, toml files, and licensing</p> </li> </ul>"},{"location":"4_Testing/","title":"Testing","text":"<p>We have an empty <code>tests</code> directory! We should introduce some basic tests just to get an idea for how testing works.</p>"},{"location":"4_Testing/#basic-tests","title":"Basic tests","text":"<p>In the <code>cancer_model.py</code> file, there is a class method called <code>diagnosis_to_target()</code>, and another class method called <code>target_to_diagnosis()</code>. We will write a test for these using Unittest. This is not the only testing framework - another popular one is Pytest.</p> <p>Add a new file in the <code>test</code> directory called <code>test_CancerModel.py</code>. Import <code>unittest</code> and the relevant modules. We typically have a single test class for each actual class, and then test each method within the test class. This maintains cohesion on a class level. You can then have different test files for different actual files.</p> <p>A test case is created by subclassing unittest.TestCase. The individual tests are defined with methods whose names start with the letters <code>test</code>. This naming convention informs the test runner about which methods represent tests: <pre><code>class TestCancerModel(unittest.TestCase):\n\n    def test_whatever_method():\n        pass\n</code></pre></p> <p>We then write methods for each corresponding method in our class that we want to test. Think about how you would run the <code>diagnosis_to_target()</code> method in a Jupyter Notebook: <pre><code>from cancer_prediction.cancer_model import CancerModel\n\nmodel = CancerModel()\nmodel.diagnosis_to_target(\"Benign\")\n\n1\n</code></pre></p> <p>The crux of each test is a call to an assert, for example - <code>assertEqual()</code> to check for an expected result; - <code>assertTrue()</code> or <code>assertFalse()</code> to verify a condition; - <code>assertRaises()</code> to verify that a specific exception gets raised.</p> <p>These methods are used instead of the assert statement so the test runner can accumulate all test results and produce a report.</p> <p>Now trying writing test cases for these two models.</p> Click to reveal the answer <pre><code>import unittest\n\nfrom cancer_prediction.cancer_model import CancerModel\n\n\nclass TestCancerModel(unittest.TestCase):\n\n    def test_diagnosis_to_target(self):\n        model = CancerModel()\n        diagnosis = 'Malignant'\n        target = model.diagnosis_to_target(diagnosis)\n        self.assertEqual(target, 0)\n\n        diagnosis = 'Benign'\n        target = model.diagnosis_to_target(diagnosis)\n        self.assertEqual(target, 1)\n\n    def test_target_to_diagnosis(self):\n        model = CancerModel()\n        target = 0\n        diagnosis = model.target_to_diagnosis(target)\n        self.assertEqual(diagnosis, 'Malignant')\n\n        target = 1\n        diagnosis = model.target_to_diagnosis(target)\n        self.assertEqual(diagnosis, 'Benign')\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>"},{"location":"4_Testing/#running-tests","title":"Running tests","text":""},{"location":"4_Testing/#in-the-vscode-ui","title":"In the VSCode UI","text":"<p>To run the tests, we click on the \"Testing\" tab on the sidebar, and then \"Configure Python Tests\". The order of clicks is as follows:</p> <p><code>unittest</code> -&gt; <code>tests</code> -&gt; <code>test_*.py</code></p> <p>This selects what type of testing framework to use, where the tests are located and what naming convention we have used for the files.</p>"},{"location":"4_Testing/#in-the-terminal","title":"In the terminal","text":"<p>We can also run these tests in the command line. We will need to know this for later, when we automate the testing process: <pre><code>poetry run python -m unittest discover tests/\n</code></pre></p> <p>You should see something like: <pre><code>$ poetry run python -m unittest discover tests/\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n</code></pre></p> <p>You can try changing part of the test code to force them to fail, and check the output. Now that the tests have run succesfully, it's time to commit and push the changes.</p>"},{"location":"4_Testing/#further-reading","title":"Further reading","text":"<ul> <li> <p> Testing resources</p> <p>Information on <code>unittest</code>, Pytest, and testing in VSCode</p> </li> </ul> <p>Note</p> <p>For some reason Codespaces is not discovering the tests. Just run them in the terminal for now. But VSCode run locally should work fine.</p>"},{"location":"5_CICD/","title":"5 CICD","text":"<p>All of this was great - we refactored our code, wrote some tests, built and published our package, and made some documentation. But what if the project grows in size, or we have to make continuous changes to the software? Can we automate this process?</p>"},{"location":"5_CICD/#github-workflows","title":"GitHub Workflows","text":"<p>The real power of this section comes from utilizing GitHub workflows.</p>"},{"location":"5_CICD/#precommits","title":"Precommits","text":"<p>We can auto format all of our files using 4 packages:</p> <ul> <li><code>black</code> - Black enforces code formatting compliant with PEP 8 such as line lengths, indentation, blank lines, etc.</li> <li><code>flake8</code> - Flake8 checks for style and syntax errors. Usually used in conjunction with <code>black</code>.</li> <li><code>mypy</code> - mypy checks for typing errors, will help find potential problems with passing incorrect types, when type hints have been added in accordance with PEP 484.</li> <li><code>isort</code> - isort sorts your imports appropriately.</li> </ul> <p>In order to ensure code consistency, we will run these checks every time we make a commit. This can be annoying, but it is for our own good!</p> <p>We first add pre-commit to the dev group: <pre><code>poetry add --dev pre-commit\n</code></pre></p> <p>Add a file in the root directory called <code>.pre-commit-config.yaml</code> and add the following content:</p> <pre><code>repos:\n- repo: https://github.com/psf/black\n  rev: 24.3.0\n  hooks:\n  - id: black\n- repo: https://github.com/PyCQA/flake8\n  rev: 7.0.0\n  hooks:\n  - id: flake8\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.9.0\n  hooks:\n  - id: mypy\n- repo: https://github.com/PyCQA/isort\n  rev: 5.13.2\n  hooks:\n  - id: isort\n</code></pre> <p>We also add the following to the <code>pyproject.toml</code> file: <pre><code>[tool.black]\nline-length = 88\n</code></pre></p> <p>Create another file called <code>.flake8</code> and add <pre><code>[flake8]\nmax-line-length = 88\n</code></pre> I know...it's annoying that we can't do this in the toml file.</p> <p>Now try and stage and commit your changes. You should get a pop up saying some stuff has failed. <code>black</code> will have altered some files, and <code>flake8</code> is probably complaining about something. Make the changes and restage and recommit. Hopefully you should see:</p> <pre><code>black....................................................................Passed\nflake8...................................................................Passed\nmypy.....................................................................Passed\nisort....................................................................Passed\n</code></pre>"},{"location":"5_CICD/#automated-testing","title":"Automated Testing","text":"<p>Note</p> <p>Why don't we just include testing int he pre-commit hook? Pre-commit hooks are supposed to be fast and local. Automated tests and other automated workflows are more comprehensive, and can take longer to run. Separating them out allows you to separate interests and keep small changes fast.</p> <p>Now we are making some progress, but we should try to automate testing everytime we push changes to the dev branch.</p> <p>First create a new file in the root <pre><code>touch .github/workflows/tests.yml\n</code></pre></p> <p>Now add the following text: <pre><code>name: Run Tests\n# Whenever code is pushed to dev and when a PR is merged from dev to main\n# run all the jobs\non:\n  push:\n    branches: [dev]\n  pull_request:\n    branches: [main]\n    types: [closed]\n\njobs:\n  # Just have one job called \"tests\"\n  tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v5\n      with:\n        python-version: \"3.10\"\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pipx install poetry\n        poetry install\n    - name: Run tests\n      run: |\n        poetry run python -m unittest discover tests/\n</code></pre></p> <p>Let's break something, to make sure this works. In your <code>test_target_to_diagnosis()</code> method, swap the 1 and the 0 around...</p> <pre><code>Run poetry run python -m unittest discover tests/\n.F\n======================================================================\nFAIL: test_target_to_diagnosis (test_CancerModel.TestCancerModel)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/runner/work/cancer-prediction/cancer-prediction/tests/test_CancerModel.py\", line 22, in test_target_to_diagnosis\n    self.assertEqual(diagnosis, \"Malignant\")\nAssertionError: 'Benign' != 'Malignant'\n- Benign\n+ Malignant\n\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nFAILED (failures=1)\nError: Process completed with exit code 1.\n</code></pre> <p>Great!, It's working! Since we have gone to the effort to use these tools, we should include them in the <code>README.md</code>. You can add the following:</p> <p> </p> <p>While, we're at it, we will also run the pre-commit on a push action. We have three</p> Click to reveal the full workflow <pre><code>name: Run Tests\n\non:\n  push:\n    branches: [dev]\n  pull_request:\n    branches: [main]\n    types: [closed]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install poetry\n      run: pipx install poetry\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.10'\n        cache: 'poetry'\n    - run: poetry install\n    - name: Run pre-commit checks\n      run: |\n        poetry run pre-commit run --all-files\n\n  tests:\n    needs: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install poetry\n      run: pipx install poetry\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.10'\n        cache: 'poetry'\n    - run: poetry install\n    - name: Run tests\n      run: |\n        poetry run python -m unittest discover tests/\n</code></pre>"},{"location":"5_CICD/#publishing","title":"Publishing","text":"<p>We now essentially have a package ready to distribute.</p>"},{"location":"5_CICD/#pull-requests","title":"Pull Requests","text":"<p>First we will make a pull request to merge changes from dev to main. Head over to the repo and click on Pull requests. Submit a new PR. Make sure the base is main, and the compare is dev. Then create pull request</p>"},{"location":"5_CICD/#publish-to-pypy","title":"Publish to PyPy","text":"<p>We will only publish to TestPyPi. First set up an account with TestPyPi. You will need to enable 2FA with an authenticator app.</p> <p>Now run</p> <pre><code>poetry build\n</code></pre> <p>This will create two packages in thr <code>dist/</code> folder:</p> <pre><code>cancer_prediction-0.1.0-py3-none-any.whl\ncancer_prediction-0.1.0.tar.gz\n</code></pre> <p>This are your distributable files. By default they will be included in the <code>.gitignore</code>, but you can remove them if you want people to be able to download development versions of your software.</p> <p>Run <pre><code>poetry config repositories.test-pypi https://test.pypi.org/legacy/\n</code></pre></p> <p>Create a new API Token in PyPi, and then run <pre><code>poetry config pypi-token.test-pypi &lt;your-token&gt;\n</code></pre></p> <p>Finally, run <pre><code>poetry publish -r test-pypi\n</code></pre> You can now look at your TestPyPi projects and it should be there! To check it has all worked, we deactivate the current environment and create a new one: <pre><code>python3.10 -m venv venvTest\n. venvTest/bin/activate\n</code></pre></p> <p>You can verify the path of the python version you are using by running <pre><code>which python\n</code></pre> and this should return something like:\\  <code>/workspaces/cancer-prediction/venvTest/bin/python</code></p> <p>We install the dependencies in the new environment using <pre><code>python -m pip install -r requirements.txt\n</code></pre> We have to do this, because if you try to install a package from TestPyPi which has dendencies that are NOT hosted on TestPyPi, the installation will fail.</p> <p>Now install your new package, and try out the <code>cancer-prediction run</code> command.</p> <p>Boom. Done. The process for publishing to PyPi is pretty similar.</p>"},{"location":"5_CICD/#automate-the-publishing-process","title":"Automate the publishing process","text":"<p>OK so we're not done yet. Now we will create a workflow that will publish a new version to TestPyPi when a PR is merged with <code>main</code>. This is a little more complicated. How can we provide maximum protection? We will have two workflows: one for <code>dev</code>, one for <code>main</code>. The breakdown might look like this:</p> <p>Workflow 1 - push to <code>dev</code>: <pre><code>graph LR;\n    A[pre-commit checks]--&gt;B[fast tests];</code></pre></p> <p>Workflow 2 - Merge PR to <code>main</code>: <pre><code>graph LR;\n    A[pre-commit checks]--&gt;B[fast tests];\n    B[fast tests]--&gt;C[slow tests];\n    C[slow tests]--&gt;D[build];\n    D[build]--&gt;E[publish]</code></pre></p> <p>So you do the fast stuff on your push to <code>dev</code> and you do all of that, plus any additional testing before pushing to production. You can add an additional step for tests when a PR is submitted, but this will do for our cases. We don't have any additional slow tests either.</p> <p>One handing thing you can do in GitHub is enforce \"Rulesets\". One Ruleset that we can create is protecting the main branch from idiocy - a PR is only allowed to be merged if all status checks are passed.</p> <p>Now we will create a workflow that will build and publish only when a PR is merged. First we will make sure that our repo has access to the necessary permissions. To do this, go to Settings -&gt; Actions -&gt; General, and allow Read and write permissions. When a new package is published, we can now add a badge!</p> <p></p>"},{"location":"5_CICD/#publish-documentation","title":"Publish documentation","text":"<p>We can publish documentation within the github ecosystem using mkdocs. First install mkdocs to the development group: <pre><code>poetry add --dev mkdocs\n</code></pre></p> <p>Now initialize the documentation: <pre><code>python -m mkdocs new .\n</code></pre></p> <p>This should create  <pre><code>\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre></p>"},{"location":"LICENSE/","title":"LICENSE","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"CICD/","title":"Continuous Integration and Deployment","text":"<p>So far, we have refactored our code, wrote some tests, built and published our package, and made some documentation. But what if the project grows in size, or we have to make continuous changes to the software? Can we automate this process?</p> <p>We want to achieve the following goals:</p> <ol> <li> <p>Automatically detect and fix issues with our code, including:</p> <ul> <li>Style</li> <li>Typing clashes</li> <li>Syntax errors</li> <li>Organization of imports</li> </ul> </li> <li> <p>Automatically test our code to protect against pushing faulty code to production.</p> </li> <li> <p>Automatically publish our package, which includes:</p> <ul> <li>Build the distribution</li> <li>Create a release on GitHub</li> <li>Create a release on PyPI</li> <li>Update version numbers</li> </ul> </li> <li> <p>Automatically generate and publish our documentation,</p> </li> </ol> <p>We can achieve all of this using GitHub Actions.</p>"},{"location":"CICD/documentation/","title":"Documentation","text":"<p>The final stage is to publish the documentation.</p> <p>Here is the workflow for this: <pre><code>name: documentation\non:\n  push:\n    branches:\n    - main\n\njobs:\n  build-docs:\n    needs: tests\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      # Set up dependencies\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: python3 -m pip install mkdocs==1.4.2 mkdocstrings==0.21.2 \"mkdocstrings[python]&gt;=0.18\"\n\n      # Deploy docs\n      - name: Deploy documentation\n        run: mkdocs gh-deploy --force\n</code></pre></p> <p>This simply says: when a push is made to main, publish the documentation.</p> <p>In addition, since we are using some tools, we should let everyone know! So we can add the following to our <code>README.md</code> file: <pre><code>&lt;div align=\"center\"&gt;\n\n  &lt;a href=\"\"&gt;[![GitHub release](https://img.shields.io/github/v/release/rkdan/cancer-prediction?include_prereleases)](https://GitHub.com/rkdan/cancer-prediction/releases)&lt;/a&gt;\n  &lt;a href=\"\"&gt;![Test status](https://github.com/rkdan/cancer-prediction/actions/workflows/tests.yml/badge.svg?branch=dev)&lt;/a&gt;\n\n&lt;/div&gt;\n\n&lt;div align=\"center\"&gt;\n\n  &lt;a href=\"\"&gt;[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)&lt;/a&gt;\n  &lt;a href=\"\"&gt;[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)&lt;/a&gt;\n  &lt;a href=\"\"&gt;[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)&lt;/a&gt;\n&lt;/div&gt;\n</code></pre></p> <p>which should display as the following: </p> <p>Before we push these changes, we will configure GitHub Pages so that our documentation will create a url for people to visit. Go to the repo Settings -&gt; Pages, and pick a branch to deploy from, in this case 'gh-pages'. So now when we push these changes and merge them to <code>main</code>, the documentation will be published and the badges will be displayed on the README!</p> <p>Tip</p> <p>You can in principle delete the 'dev' branch whenever you build your package. But if for whatever reason you decide to keep it, be sure to do the following <pre><code>git checkout dev\ngit fetch origin\ngit merge origin/main\n</code></pre></p> <p>This will ensure that the 'dev' branch is up to date with the 'main' branch. Do this BEFORE you make any changes to the 'dev' branch, otherwise you have to merge the changes manually.</p>"},{"location":"CICD/precommit/","title":"Pre-commits","text":"<p>We start with the pre-commit. This is our first line of defence against simple to correct errors in our code. pre-commit hooks let you customize Git\u2019s internal behavior and trigger customizable actions at key points in the development life cycle. We can use this to run checks on our code before we commit it. This can include things like: -   Code formatting -   Linting -   Typing checks -   Import organization</p>"},{"location":"CICD/precommit/#packages","title":"Packages","text":""},{"location":"CICD/precommit/#black","title":"<code>black</code>","text":"<p>Black enforces code formatting compliant with PEP 8 enforces code formatting compliant with PEP 8 such as line lengths, indentations, blank lines, etc. It is customizable, so if you don't like certain line length restrictions, you can always change them. You can also tell <code>black</code> not to look in certain files, or ignore certain features.</p>"},{"location":"CICD/precommit/#flake8","title":"<code>flake8</code>","text":"<p>Flake8 checks for style and syntax errors. Usually used in conjunction with <code>black</code>, and you can also tell it to ignore things.</p>"},{"location":"CICD/precommit/#mypy","title":"<code>mypy</code>","text":"<p>Mypy checks for typing errors, will help find potential problems with passing incorrect types, when type hints have been added in accordance with PEP 484.</p>"},{"location":"CICD/precommit/#isort","title":"<code>isort</code>","text":"<p>Isort sorts your imports appropriately.</p> <p>In order to ensure code consistency, we will run these checks every time we make a commit. This can be annoying, but it is for our own good!</p>"},{"location":"CICD/precommit/#setting-up-pre-commit","title":"Setting up pre-commit","text":"<p>First, we need to make sure we add the required files to our project: <pre><code>poetry add --group dev pre-commit black isort flake8 mypy\n</code></pre></p> <p>We must now make some changes to our <code>pyproject.toml</code> file:</p> <pre><code>[tool.black]\nline-length = 88\nexclude = '''\n/(\n      .eggs         \n    | .git          \n    | .hg\n    | .mypy_cache\n    | .tox\n    | venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n'''\n</code></pre> <p>Take it from me, we DO NOT want our tools to try and alter the files in our virtual environment or distributions folders!</p> <p>Similarly, for <code>isort</code>: <pre><code>[tool.isort]\nprofile = \"black\"\nline_length = 88\nmulti_line_output = 3\ninclude_trailing_comma = true\nvirtual_env = \"venv\"\n</code></pre></p> <p>Unfortunately, <code>flake8</code> can't be configured inside the <code>pyproject.toml</code> file, so we have to create a separate file in our root directory called <code>.flake8</code>. In it, we add:</p> <pre><code>[flake8]\nmax-line-length = 88\n</code></pre>"},{"location":"CICD/precommit/#the-pre-commit-hook","title":"The pre-commit hook","text":"<p>Now we create a file in the root directory called <code>.pre-commit-config.yaml</code>, and add the following: <pre><code>repos:\n- repo: https://github.com/psf/black\n  rev: 24.3.0\n  hooks:\n  - id: black\n- repo: https://github.com/PyCQA/flake8\n  rev: 7.0.0\n  hooks:\n  - id: flake8\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.9.0\n  hooks:\n  - id: mypy\n- repo: https://github.com/PyCQA/isort\n  rev: 5.13.2\n  hooks:\n  - id: isort\n</code></pre></p>"},{"location":"CICD/precommit/#trying-it-out","title":"Trying it out","text":"<p>In the command line, we can run <pre><code>poetry run pre-commit run --all-files\n</code></pre></p> <p>and we should get the following (This may take a minute or two to run for the first time): <pre><code>black....................................................................Passed\nflake8...................................................................Passed\nmypy.....................................................................Passed\nisort....................................................................Passed\n</code></pre></p> <p>If there are any issues, work through them to fix the issues. Similarly when you use the VSCode UI to make a commit, any issues will be picked up.</p> <p>Now in the <code>cancer_model.py</code> file, add the following import statement <pre><code>import matplotlib.pyplot as plt\n</code></pre></p> <p>You should get the following output when you run the pre-commit <pre><code>black....................................................................Passed\nflake8...................................................................Failed\n- hook id: flake8\n- exit code: 1\n\ncancer_prediction/cancer_model.py:4:1: F401 'matplotlib.pyplot as plt' imported but unused\n\nmypy.....................................................................Passed\nisort....................................................................Passed\n</code></pre></p> <p>Now head into the <code>streamlit_app.py</code> file and in the <code>train_and_save_model() function, for the</code>filename<code>argument, change the type to</code>int`, so it reads: <pre><code>def train_and_save_model(train_data, filename: int = \"cancer_model.pkl\"):\n</code></pre></p> <p>This is nonsensical, since you are trying to pass a string as argument that should be an <code>int</code>! And sure enough, when you run the pre-commit, you get this complaint from <code>mymp</code> <pre><code>black....................................................................Passed\nflake8...................................................................Passed\nmypy.....................................................................Failed\n- hook id: mypy\n- exit code: 1\n\ncancer_prediction/streamlit_app.py:25: error: Incompatible default for argument \"filename\" (default has type \"str\", argument has type \"int\")  [assignment]\ncancer_prediction/streamlit_app.py:27: error: No overload variant of \"join\" matches argument types \"str\", \"int\"  [call-overload]\ncancer_prediction/streamlit_app.py:27: note: Possible overload variants:\ncancer_prediction/streamlit_app.py:27: note:     def join(str, /, *paths: str) -&gt; str\ncancer_prediction/streamlit_app.py:27: note:     def join(str | PathLike[str], /, *paths: str | PathLike[str]) -&gt; str\ncancer_prediction/streamlit_app.py:27: note:     def join(bytes | PathLike[bytes], /, *paths: bytes | PathLike[bytes]) -&gt; bytes\ncancer_prediction/streamlit_app.py:32: error: No overload variant of \"dirname\" matches argument type \"int\"  [call-overload]\ncancer_prediction/streamlit_app.py:32: note: Possible overload variants:\ncancer_prediction/streamlit_app.py:32: note:     def [AnyStr in (str, bytes)] dirname(p: PathLike[AnyStr]) -&gt; AnyStr\ncancer_prediction/streamlit_app.py:32: note:     def [AnyOrLiteralStr in (str, bytes, str)] dirname(p: AnyOrLiteralStr) -&gt; AnyOrLiteralStr\ncancer_prediction/streamlit_app.py:33: error: Argument 1 to \"save\" of \"CancerModel\" has incompatible type \"int\"; expected \"str\"  [arg-type]\nFound 4 errors in 1 file (checked 7 source files)\n\nisort....................................................................Passed\n</code></pre></p>"},{"location":"CICD/precommit/#further-reading","title":"Further reading","text":"<ul> <li> <p> CI/CD - Pre-commit resources</p> <p>Information on GitHub Actions, Black, Flake8, Mypy, Isort, and Git Hooks</p> </li> </ul>"},{"location":"CICD/publishing/","title":"Publishing","text":"<p>Finally, we will automate the publishing of our package to PyPI and the release of the documentation.</p>"},{"location":"CICD/publishing/#publishing","title":"Publishing","text":""},{"location":"CICD/publishing/#pull-requests","title":"Pull requests","text":"<p>When do we want to publish our package and documentation? We don't want to publish when we push changes to <code>dev</code>, because there might be some experimental changes that we've made that could break our package. Instead we should restrict publishing only when there are pushes made to <code>main</code>. However, we don't just want to push changes to main directly.</p> <p>Head over to the repo and submit a pull request. It should look something like this:</p> <p></p> <p>You should make sure that the <code>compare</code> branch is <code>dev</code> and the <code>base</code> branch is <code>main</code>. There are no conflicts so I can merge these branches without any issues. If there are conflicts you must manually go through them and decide whether you want to keep the <code>base</code> changes or the <code>compare</code> changes. Hit Create pull request and give it a title and description, and hit Create pull request again. You should come through to a page that looks somewhat like the image below.</p> <p></p> <p>Notice that there are some checks happening. We want to avoid hitting that Merge pull request button as long as those checks have not passed. We can actually enforce this, but for now we can just manually make sure that the checks have passed. When the PR is merged, a new release will be made. So how do we do this?</p> <p>To demonstrate the process, create a new workflow called <code>build-and-publish.yml</code>. It looks like this:</p> <pre><code>name: Build and Publish\n\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install poetry\n        run: pipx install poetry\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.10'\n          cache: 'poetry'\n      - run: poetry install\n      - name: Run pre-commit checks\n        run: |\n          poetry run pre-commit run --all-files\n\n  tests:\n    needs: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install poetry\n        run: pipx install poetry\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.10'\n          cache: 'poetry'\n      - run: poetry install\n      - name: Run tests\n        run: |\n          poetry run python -m unittest discover tests/\n\n  release:\n    needs: tests\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Install Poetry\n        run: pipx install poetry\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '3.10'\n          cache: 'poetry'\n      - name: Install dependencies\n        run: poetry install\n      - name: Bump version\n        run: |\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n\n          # Get the commit message\n          commit_message=$(git log -1 --pretty=%B)\n\n          # Determine the version bump type based on the commit message\n          if echo \"$commit_message\" | grep -q -i -E '^(break|major)\\b'; then\n            version_type=\"major\"\n          elif echo \"$commit_message\" | grep -q -i -E '^(feat|minor)\\b'; then\n            version_type=\"minor\"\n          else\n            version_type=\"patch\"\n          fi\n\n          # Bump the version using Poetry\n          poetry version $version_type\n          version=$(poetry version -s)\n\n          git add pyproject.toml\n          git commit -m \"Bump version to $version\"\n          git push\n      - name: Build package\n        run: poetry build\n      - name: Get version from pyproject.toml\n        id: get_version\n        run: |\n          version=$(poetry version -s)\n          echo \"::set-output name=version::$version\"\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: v${{ steps.get_version.outputs.version }}\n          release_name: Release ${{ steps.get_version.outputs.version }}\n          body: Release ${{ steps.get_version.outputs.version }}\n      - name: Publish to TestPyPI\n        env:\n          POETRY_REPOSITORIES_TEST_PYPI_URL: https://test.pypi.org/legacy/\n        run: |\n          poetry config repositories.test-pypi https://test.pypi.org/legacy/\n          poetry publish -r test-pypi -u __token__ -p ${{ secrets.TEST_PYPI_API_TOKEN }}\n</code></pre> <p>This is quite a bit longer than the one we did for only testing! Notice we have three jobs: the pre-commit (again), the tests (again) and the release. Why do we do all these checks? This seems insane. We'll talk about this later. For now, let's have a look at what is going on.</p>"},{"location":"CICD/publishing/#run-conditions","title":"Run conditions","text":"<p><pre><code>name: Build and Publish\n\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n</code></pre> As before, we name the workflow. Now though, we run on two occasions: when a PR is submitted targeting <code>main</code>, and when a push is made to <code>main</code></p>"},{"location":"CICD/publishing/#the-jobs","title":"The Jobs","text":"<p>The first two jobs are the same. The next job <code>release</code> requires the first two jobs to pass, and in addition we have this line: <pre><code>if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n</code></pre></p> <p>This is saying that the <code>release</code> job will only run when there is a push to main. In other words, when someone submits a PR only, this section of code will NOT run.</p> <p>The next interesting part is <pre><code>- name: Bump version\n    run: |\n        git config user.name github-actions\n        git config user.email github-actions@github.com\n\n        # Get the commit message\n        commit_message=$(git log -1 --pretty=%B)\n\n        # Determine the version bump type based on the commit message\n        if echo \"$commit_message\" | grep -q -i -E '^(break|major)\\b'; then\n        version_type=\"major\"\n        elif echo \"$commit_message\" | grep -q -i -E '^(feat|minor)\\b'; then\n        version_type=\"minor\"\n        else\n        version_type=\"patch\"\n        fi\n\n        # Bump the version using Poetry\n        poetry version $version_type\n        version=$(poetry version -s)\n\n        git add pyproject.toml\n        git commit -m \"Bump version to $version\"\n        git push\n</code></pre></p> <p>This part is responsible for bumping the version number in the <code>pyproject.toml</code> file. First we set some conditions on our commit messages. I can have three different types of commit message:</p> <pre><code>patch: &lt;commit message here&gt;\nminor: &lt;commit message here&gt; # (1)!\nmajor: &lt;commit message here&gt; # (2)!\n</code></pre> <ol> <li>You can also substitute <code>minor</code> for <code>feat</code></li> <li>You can also substitute <code>major</code> for <code>break</code></li> </ol> <p>The type of changes you make will depend on which number in the version gets changed according to standard semantic versioning rules. The idea of semantic versioning is to use 3-part version numbers, major.minor.patch, where the project author increments:</p> <ul> <li>major when they make incompatible API changes,</li> <li>minor when they add functionality in a backwards-compatible manner, and</li> <li>patch, when they make backwards-compatible bug fixes.</li> </ul> <p>We then allow the GitHub bot to alter the version in the <code>pyproject.toml</code> file, and commit and push the changes. Obviously this push does not trigger the workflow again, otherwise that would result in an endless loop. In order for this to work, you need to give the GitHub Bot permission to write to your repo. Head to Settings -&gt; Actions -&gt; General. Look for Workflow permissions, and click Read and write permissions, and save.</p> <p>The final section builds the package and releases it to GitHub and to Test PyPI. In order for this to work, you have to give GitHub your API key. Head to the repo Settings -&gt; Secrets and variables -&gt; Actions. Add a new repository secret and call it <code>TEST_PYPI_API_TOKEN</code>.</p>"},{"location":"CICD/publishing/#why-so-many-checks","title":"Why so many checks?","text":"<p>For the most part, all of these checks are for demonstration purposes and to increase exposure to different basic workflows. But what if you are the maintainer of a piece of software that has two or three other PhD students working on it, and you like total control? You might have three rounds of checks.</p> <p>Check 1 - push to <code>dev</code>: <pre><code>graph LR;\n    A[pre-commit checks]--&gt;B[fast tests];</code></pre></p> <p>Check 2 - PR to <code>main</code>: <pre><code>graph LR;\n    A[pre-commit checks]--&gt;B[fast tests];\n    B[fast tests]--&gt;C[slow tests];</code></pre></p> <p>Check 3 - PR merge to <code>main</code>: <pre><code>graph LR;\n    A[pre-commit checks]--&gt;B[fast tests];\n    B[fast tests]--&gt;C[slow tests];\n    C[slow tests]--&gt;D[build];\n    D[build]--&gt;E[publish]</code></pre></p> <p>Your PhD students will run the pre-commit and do some quick test checks locally, and then their code will get automatically tested when they do a push to their development branch, which will then do the same thing, perhaps on a variety of operating systems or with python versions. They will then submit a PR, whereupon the same tests occur, and perhaps some additional slower more comprehensive tests. You will then see the outcome of these tests and decide to merge the changes to main. All tests are conducted again, and the software is built and released.</p> <p>For a single person working on a project, and for most projects, this is overkill, and you can get away with significantly less. However in some key pieces of software with many people working on it, or where certain regulatory issues are present, having so many redundant checks provides multiple layers of protection from idiocy. If your project is open source, then you need strict control over who can contribute.</p> <p>Typically you can now just delete the <code>dev</code> branch. When you want to make more changes, just create a new branch from main, make your changes, then merge back to main and release directly from main. Or you can keep your <code>dev</code> branch, but when you want to work on it again, you must remember to update your dev branch. You can do this with <pre><code>git checkout dev\ngit merge origin/main\n</code></pre></p>"},{"location":"CICD/publishing/#different-approaches-to-cicd","title":"Different approaches to CI/CD","text":"<p>There are two main schools of development on git: Git Flow, and trunk-based development.</p>"},{"location":"CICD/publishing/#git-flow","title":"Git Flow","text":"<p>In Git Flow you have two long-running branches <code>main</code> and <code>dev</code>. Workers will usually branch off of <code>dev</code>, make some feature change, then submit a PR. The PR is accepted (or not) and merged to <code>dev</code>. When we are happy, we create a release branch, do some tests, and then merge this branch into <code>main</code> and tag it with a release. This style is very suitable to open-source projects, where you can't trust random people trying to make changes to your code.</p>"},{"location":"CICD/publishing/#trunk","title":"Trunk","text":"<p>In Trunk-based development, you work from a single <code>main</code> branch. Usually you work from it directly, and make short changes, and make small <code>feature</code> branches. Development is fast and continuous. When you are happy, you create a separate <code>release</code> branch which is pushed to PyPI (or wherever). This is a great option for small, speedy projects.</p>"},{"location":"CICD/publishing/#further-reading","title":"Further reading","text":"<ul> <li> <p> CI/CD - Publishing resources</p> <p>Information on collaborating in GitHub, and different types of development</p> </li> </ul>"},{"location":"CICD/testing/","title":"Testing","text":"<p>The process of automated testing is a little more involved, and we now introduce GitHub Actions.</p>"},{"location":"CICD/testing/#the-testing-workflow","title":"The testing workflow","text":"<p>Create a new directory <pre><code>mkdir .github/workflows\n</code></pre></p> <p>and add a file in this directory called <code>tests.yml</code>. Now add the following</p> <pre><code>name: Run Tests\n\non:\n  push:\n    branches: [dev]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install poetry\n      run: pipx install poetry\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.10'\n        cache: 'poetry'\n    - run: poetry install\n    - name: Run pre-commit checks\n      run: |\n        poetry run pre-commit run --all-files\n\n  tests:\n    needs: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install poetry\n      run: pipx install poetry\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.10'\n        cache: 'poetry'\n    - run: poetry install\n    - name: Run tests\n      run: |\n        poetry run python -m unittest discover tests/\n</code></pre> <p>Let's walk through what we have done here.</p>"},{"location":"CICD/testing/#choose-when-the-workflow-runs","title":"Choose when the workflow runs","text":"<pre><code>name: Run Tests\n\non:\n  push:\n    branches: [dev]\n</code></pre> <p>We give the workflow a name <code>Run Tests</code>. Then we say, whenever a push is made to <code>dev</code>, run this workflow.</p>"},{"location":"CICD/testing/#the-jobs","title":"The jobs","text":"<p>Next, we define what <code>jobs</code> we want to run. In this case we have two: the <code>pre-commit</code>, and the <code>tests</code>.</p>"},{"location":"CICD/testing/#the-pre-commit-checks","title":"The pre-commit checks","text":"<pre><code>pre-commit:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install poetry\n        run: pipx install poetry\n    - uses: actions/setup-python@v5\n        with:\n        python-version: '3.10'\n        cache: 'poetry'\n    - run: poetry install\n    - name: Run pre-commit checks\n        run: |\n        poetry run pre-commit run --all-files\n</code></pre> <p>We choose what OS we want to run on, in this case the latest version of Ubuntu. Then we define what steps to take:</p> <ol> <li>Install poetry with python version 3.10</li> <li>Install the package with <code>poetry install</code></li> <li>Run the pre-commit on our files.</li> </ol> <p>So this entire thing is the equivalent to us saying <code>poetry run pre-commit run --all-files</code> from before.</p>"},{"location":"CICD/testing/#the-test-cases","title":"The test cases","text":"<pre><code>tests:\nneeds: pre-commit\nruns-on: ubuntu-latest\n\nsteps:\n- uses: actions/checkout@v4\n- name: Install poetry\n    run: pipx install poetry\n- uses: actions/setup-python@v5\n    with:\n    python-version: '3.10'\n    cache: 'poetry'\n- run: poetry install\n- name: Run tests\n    run: |\n    poetry run python -m unittest discover tests/\n</code></pre> <p>We have defined an extra field here <code>needs: pre-commit</code>. This ensures that this part of the workflow will not run unless the pre-commit checks all pass. If there are problems with our code, what's the point of running the tests? Fix the issues first, then resubmit.</p> <p>We then install poetry and python again, and run the unittests. So now, everytime we push changes to the <code>dev</code> branch, we will initilize this workflow!</p> <p>Tip</p> <p>It is also possible to use multiple versions of python and even different operating systems using the <code>matrix</code> strategy:</p> <pre><code>jobs:\n    example_matrix:\n        strategy:\n            matrix:\n            os: [ubuntu-latest, macos-latest]\n            version: [3.10, 3.11, 3.12]\n        runs-on: ${{ matrix.os }}\n        steps:\n            - uses: actions/setup-python@v5\n            with:\n                python-version: ${{ matrix.version }}\n</code></pre> <p>The world of GitHub Actions workflows is complex and full of danger. My advice is to keep it simple.</p>"},{"location":"CICD/testing/#further-reading","title":"Further reading","text":"<ul> <li> <p> CI/CD - Testing resources</p> <p>Information on GitHub Workflows</p> </li> </ul>"},{"location":"Home/LICENSE/","title":"License","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"Home/about/","title":"About us","text":"<p>The Accelerate Programme for Scientific Discovery pursues research at the interface of AI and the sciences, generating new scientific insights and developing AI methods that can be deployed to advance scientific knowledge. This research is carried out in partnership with a community of scientists and AI specialists passionate about the use of AI to benefit science and society.</p> <p>As part of our work, we aim to put together some resources to help researchers in developing software.</p> <p>For more details please visit Our Website.</p>"},{"location":"Home/workshop/","title":"The Workshop","text":"<p>This material is designed to help you get started with packaging your code. It is designed to be a hands-on workshop, where you will be guided through the process of setting up a new project, and then packaging it for distribution.</p> <p>Although the material is designed to be followed in order, you can jump to any section you like. We usually run this event over a day, with a mix of talks and practical sessions. Here is a rough outline of the day:</p> Time Content Slides Sections 9:00am - 9:30am Registration and welcome refreshments 9:30am - 10:00am Introduction- Why is this important?- The Accelerate Programme - What does it mean to publish software? Introduction 10:00am - 11:00am Version Control- Overview of Git and GitHub- Developing code- Key files Version control 11:00am - 11:30am Break 11:30am - 1:00pm Poetry- Setting up Codespaces- Overview of the project- Using Poetry- File structure- Licensing- CLI Entry points Poetry Setting upProject overviewPoetry 1:00pm - 2:00pm Lunch 2:00pm - 3:00pm Testing- Testing scientific software- Writing unit tests Testing Testing 3:00pm - 3:30pm Publishing and documenting- Typing and docstrings- Publishing to PyPI Documentation PublishingDocumentation 3:30pm - 4:00pm Break 4:00pm - 5:00pm Automating everything!- Pre-commit hooks- Testing- Publishing- Documentation Pre-commitsTestingPublishingDocumentation"},{"location":"publishing_docs/documentation/","title":"Making Documentation","text":"<p>There are a few popular ways to publish documentation for your project. Here, we will use MkDocs, but another popular framework is Read the Docs. MkDocs is highly customizable, has good support, and is used by many companies around the world. This site was created with Material for MkDocs.</p>"},{"location":"publishing_docs/documentation/#documenting-your-code","title":"Documenting your code","text":"<p>The first step is appropriately documenting your code. In general, the code itself should try to follow the PEP 8 Style Guide for Python Code. However, this extract from PEP 8 is useful to keep in the back of your mind:</p> <p>A Foolish Consistency is the Hobgoblin of Little Minds</p> <p>The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code. As PEP 20 says, \u201cReadability counts\u201d.</p> <p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.</p> <p>However, know when to be inconsistent \u2013 sometimes style guide recommendations just aren\u2019t applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don\u2019t hesitate to ask!</p> <p>In particular: do not break backwards compatibility just to comply with this PEP!</p> <p>Some other good reasons to ignore a particular guideline:</p> <ol> <li> <p>When applying the guideline would make the code less readable, even for someone who is used to reading code that follows this PEP.</p> </li> <li> <p>To be consistent with surrounding code that also breaks it (maybe for historic reasons) \u2013 although this is also an opportunity to clean up someone else\u2019s mess (in true XP style).</p> </li> <li> <p>Because the code in question predates the introduction of the guideline and there is no other reason to be modifying that code.</p> </li> <li> <p>When the code needs to remain compatible with older versions of Python that don\u2019t support the feature recommended by the style guide.</p> </li> </ol> <p>Although our code should be high quality, there are some things that will greatly help with readability. Think about what happens when you hover your mouse over a function in VSCode:</p> <p></p> <p>We can see that hovering over the <code>make_symmetric()</code> method gives us some information - what arguments it takes, and what it should return. This information is captured by two things:</p> <ol> <li>Type hints</li> <li>Docstrings</li> </ol>"},{"location":"publishing_docs/documentation/#type-hints","title":"Type hints","text":"<p>We cover type hints first, because they will make adding docstrings easier. For inspiration on type hints, we can turn to PEP 484. Type hints are exactly that: hints about what type an input or output should be. In the case of <code>make_symmetric()</code>, we can see that it takes two arguments <code>A</code> which is a numpy array, and <code>bin</code>, which is a boolean with a default value of <code>False</code>. We add type hints in the following way:</p> <p><pre><code>def my_function(arg: type, optional_arg: type = default_value) -&gt; type:\n    # function logic\n</code></pre> If your function doesn't return anything, then you can use <code>None</code>. A class <code>__init__</code> method should also return <code>None</code>. Check out PEP 484 for some acceptable types, but you can use custom types, or multiple types. Have a look through the scripts in our project to see some more examples.</p> <p>Tip</p> <p>You should always try using type hints wherever possible</p>"},{"location":"publishing_docs/documentation/#docstrings","title":"Docstrings","text":"<p>Docstrings are the providence of PEP 257. Looking at our example above we can see that the docstring part of this function is:</p> <pre><code>\"\"\"\nTake an adjacency matrix and make it symmetric.\n\nArgs:\n    A (np.ndarray): Adjacency matrix of the network.\n    bin (bool, optional): Is the network binary or not. Defaults to False.\n\nReturns:\n    np.ndarray: Symmetric adjacency matrix of the network.\n\"\"\"\n</code></pre> <p>There are a few different templates for creating docstrings. The one used above is the Google template. Here are some common templates:</p> <ol> <li> <p>Google <pre><code>\"\"\"\nThis is an example of Google style.\n\nArgs:\n    param1 (type): Description of param1.\n    param2 (type, optional): Description of param2. Defaults to value.\n\nReturns:\n    type: This function returns something.\n\nRaises:\n    KeyError: Raises a KeyError exception.\n\"\"\"\n</code></pre></p> </li> <li> <p>Numpy <pre><code>\"\"\"\nThis is an example of Numpy style.\n\nParameters\n----------\nparam1 : type\n    the 1st param name `first`\nparam2 : {'value', 'other'}, optional\n    param, by default 'value'\n\nReturns\n-------\ntype\n    a value in a string\n\nRaises\n------\nKeyError\n    when a key error happens\n\"\"\"\n</code></pre></p> </li> <li> <p>reST <pre><code>\"\"\"\nThis is an example of reST style.\n\n:param type param1: this is a first param\n:param type, optional param2: this is a second param, defaults to value\n:returns type: this is a description of what is returned\n:raises keyError: raises an exception\n\"\"\"\n</code></pre></p> </li> </ol> <p>All of these are acceptable, but Google and Numpy offer very human readable docstrings.</p> <p>Since we have taken the time to use type hints, we can actually configure VSCode to automatically generate docstrings for us! First download the Auto Docstring extension. Go into Settings, and search for <code>Auto Docstring: Docstring Format</code>:</p> <p></p> <p>Probably this is Google by default. Now, go into your <code>streamlit_app.py</code> script and find the <code>train_and_save_model</code> function. We haven't added type hints yet, so lets do that.</p> Click to reveal the answer <pre><code>def train_and_save_model(train_data: pd.DataFrame, filename: str = 'cancer_model.pkl') -&gt; CancerModel:\n</code></pre> <p>Now all we need to do is press enter after the colon and typ <code>\"\"\"</code>. A prompt will appear called <code>Docstring Generation</code>. Hit <code>tab</code> and the following should appear</p> Click to reveal <pre><code>def train_and_save_model(train_data: pd.DataFrame, filename: str = 'cancer_model.pkl') -&gt; CancerModel:\n    \"\"\"_summary_\n\n    Args:\n        train_data (pd.DataFrame): _description_\n        filename (str, optional): _description_. Defaults to 'cancer_model.pkl'.\n\n    Returns:\n        CancerModel: _description_\n    \"\"\"\n</code></pre> <p>It is now up to us to fill in summary and descriptions. If you have GitHub Copilot enabled, it will also try to autocomplete the type hints. Needless to say, this can save us quite a lot of time.</p> <p>There are a few other functions and methods without type hints or docstrings, so feel free to complete them.</p>"},{"location":"publishing_docs/documentation/#setting-up-mkdocs","title":"Setting up MkDocs","text":"<p>Perhaps surprisingly, MkDocs can automatically parse your docstring information and produce documentation! We must first install mkdocs and mkdocstrings <pre><code>poetry add mkdocs mkdocstrings mkdocstrings[python]\n</code></pre></p> <p>We now run <pre><code>python -m mkdocs new .\n</code></pre></p> <p>This will generate a <code>mkdocs.yml</code> file in your root directory, and a <code>docs</code> folder, which will contain a file named <code>index.md</code> with some default text. We will keep things simple for now, so in the <code>index.md</code> file, we just add:</p> <pre><code>## Documentation\n- [cancer-prediction-&lt;suffix&gt;](cancer-prediction-&lt;suffix&gt;/config.md): documentation for functions and classes.\n- [Code](https://github.com/&lt;your-username&gt;/cancer-prediction-&lt;suffix&gt;)\n</code></pre> <p>Now we want to mimic the structure of our source file directory, so we create a new folder within <code>docs</code> called <code>cancer-prediction</code>, and within, we create two files: <code>cancer_model.md</code> and <code>streamlit_app.md</code>. So your documentation directory should be something like:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 cancer-prediction\n\u2502  \u2502  \u251c\u2500 cancer_model.md\n\u2502  \u2502  \u2514\u2500 streamlit_app.md\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Within these two new files, we add: <pre><code>::: cancer_prediction.cancer_model\n</code></pre></p> <p>and <pre><code>::: cancer_prediction.streamlit_app\n</code></pre></p> <p>This tells MkDocs where to look for the docstring information. The final thing left is to complete the <code>mkdocs.yml</code> file. These can get quite complicated (just have a quick look at the <code>yml</code> for this branch of the repo), and full customization options is well beyond the scope of this course. We will keep it simple:</p> <pre><code>site_name: Cancer Prediction\nsite_url: https://github.com/&lt;user-name&gt;/cancer-prediction-&lt;suffix&gt;\nrepo_url: https://github.com/&lt;user-name&gt;/cancer-prediction-&lt;suffix&gt;\nnav:\n  - Home: index.md\n  - cancer-prediction:\n    - cancer model: cancer-prediction/cancer_model.md\n    - streamlit app: cancer-prediction/streamlit_app.md\ntheme: readthedocs\nplugins:\n  - mkdocstrings\nwatch:\n  - .  # reload docs for file changes\n</code></pre> <p>All that is left is to locally serve the documentation: <pre><code>python -m mkdocs serve\n</code></pre> This should open a page like this: </p> <p>and if you click the \"cancer model\" tab on the sidebar, you should see something like this: </p> <p>And that's about it.</p>"},{"location":"publishing_docs/documentation/#further-reading","title":"Further reading","text":"<ul> <li> <p> Documentation resources</p> <p>Information on PEP style guides, docstring conventions and type hints, as well as popular documentation frameworks</p> </li> </ul>"},{"location":"publishing_docs/publishing/","title":"Publishing to PyPI","text":"<p>In this course, we will only publish to Test PyPI, but the process is broadly the same for PyPI.</p>"},{"location":"publishing_docs/publishing/#create-pypi-account","title":"Create PyPI Account","text":"<p>Head to Test PyPI. Register for a new account. You will probably need to set up Two Factor Authentication (2FA). This is easiest using an app such as Google Authenticator.</p> <p>Go to 'Account settings', scroll down to Api Tokens, and click on 'Add API Token'. Leave this page open for now, because you will need this token shortly.</p>"},{"location":"publishing_docs/publishing/#build-your-package","title":"Build your package","text":"<p>Back in VSCode, run <pre><code>poetry build\n</code></pre></p> <p>This will create two packages in thr <code>dist/</code> folder: <pre><code>cancer_prediction-0.1.0-py3-none-any.whl\ncancer_prediction-0.1.0.tar.gz\n</code></pre></p> <p>These are your distributable files. By default they will be included in the <code>.gitignore</code>, but you can remove them if you want people to be able to download development versions of your software.</p>"},{"location":"publishing_docs/publishing/#publish","title":"Publish","text":"<p>Copy the API Token you created in Test PyPI, and then run <pre><code>poetry config pypi-token.test-pypi &lt;your-token&gt;\npoetry config repositories.test-pypi https://test.pypi.org/legacy/\n</code></pre></p> <p>Finally, run <pre><code>poetry publish -r test-pypi\n</code></pre></p> <p>You can now look in your Test PyPI projects and it should be there! To check it has all worked, we deactivate the current environment and create a new one: <pre><code>python3.10 -m venv venvTest\n. venvTest/bin/activate\n</code></pre></p> <p>You can verify the path of the python version you are using by running <pre><code>which python\n</code></pre> and this should return something like: <pre><code>/workspaces/cancer-prediction/venvTest/bin/python\n</code></pre></p> <p>Just as a sanity check, trying running <pre><code>cancer-prediction run\n</code></pre></p> <p>and hopefully zsh (or bash) should not recognize this command.</p> <p>We install the dependencies in the new environment using <pre><code>python -m pip install -r requirements.txt\n</code></pre> We have to do this, because if you try to install a package from Test PyPI which has dendencies that are NOT hosted on Test PyPI, the installation will fail.</p> <p>Now install your new package using <code>pip</code>- copy the command from the Test PyPI page for your project, and try out the <code>cancer-prediction run</code> command.</p> <p>It really is that simple. Like Poetry.</p> <p>Tip</p> <p>What happens when we try to publish to PyPI for a second time? We will need to increment the version number in the <code>pyproject.toml</code> file. This is because PyPI will not allow you to upload the same version of a package twice.</p>"},{"location":"publishing_docs/publishing/#further-reading","title":"Further reading","text":"<ul> <li> <p> Publishing resources</p> <p>Information on PyPI, Test PyPI, Python packaging and publishing with Poetry</p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<ul> <li> <p> Slides</p> <p>Here you can find the slides for the course material</p> </li> </ul> <ul> <li> <p> Resources</p> <p>Each section contains a summary of further resources, but here they are all collected for convenience</p> </li> </ul>"},{"location":"resources/references/","title":"Further reading","text":"<p>Here you can find the relevant references used in the sections, and some additional resources.</p>"},{"location":"resources/references/#setting-up","title":"Further reading","text":"<p>Python - Creation of virtual environments</p> <p>GitHub - About Git</p> <p>GitHub - Introduction to GitHub</p> <p>GitHub - Codespaces</p> <p>GitHub - Copilot</p> <p>GitHub - GitHub Student Developer Pack</p> <p>GitHub - Ignoring files</p> <p>Microsoft - Introduction to Git</p> <p>Microsoft - Getting started with Visual Studio Code</p> <p>Microsoft - Python in Visual Studio Code</p> <p>Microsoft - Using Git source control in VS Code</p> <p>Microsoft - Working with GitHub in VS Code</p>"},{"location":"resources/references/#setting-up","title":"Setting Up","text":""},{"location":"resources/references/#project-overview","title":"Further reading","text":"<p>Scikit Learn - Documentation - this is seriously the gold standard of machine learning software documentation. It contains not only excellent functional documentation but also a user guide to the methods, techniques, and algorithms used. Highly recommend.</p> <p>Scikit Learn - Wisconsin breast cancer dataset</p> <p>Streamlit - Get started</p> <p>Typer - User guide introduction</p> <p>argparse - Parser for CL options, arguments and sub-commands</p>"},{"location":"resources/references/#overview","title":"Project overview","text":""},{"location":"resources/references/#poetry","title":"Further reading","text":"<p>Poetry - Introduction</p> <p>Poetry - Basic usage</p> <p>Poetry - The <code>pyproject.toml</code> file</p> <p>Pip - <code>pyproject.toml</code></p> <p>Python Packaging - Writing you <code>pyproject.toml</code></p> <p>GitHub - Choose an open source license</p>"},{"location":"resources/references/#poetry","title":"Poetry","text":""},{"location":"resources/references/#testing","title":"Further reading","text":"<p>Python - <code>unittest</code> - Unit testing framework</p> <p>Pytest - Get started</p> <p>Microsoft - Python testing in Visual Studio Code</p>"},{"location":"resources/references/#testing","title":"Testing","text":""},{"location":"resources/references/#publishing","title":"Further reading","text":"<p>PyPI</p> <p>Test PyPI</p> <p>Python - Python packing user guide</p> <p>Python - Packaging Python projects</p> <p>Poetry - <code>build</code></p> <p>Poetry - <code>publish</code></p>"},{"location":"resources/references/#publishing","title":"Publishing","text":""},{"location":"resources/references/#documentation","title":"Further reading","text":"<p>Python - PEP 8 - Style guide for Python code</p> <p>Python - PEP 20 - The Zen of Python</p> <p>Python - PEP 257 - Docstring conventions</p> <p>Python - PEP 484 - Type hints</p> <p>MkDocs - Getting started with MkDocs</p> <p>Material for MkDocs - Getting started</p> <p>Read the Docs - Read the Docs tutorial</p>"},{"location":"resources/references/#documentation","title":"Documentation","text":""},{"location":"resources/references/#cicd-pre-commit","title":"Further reading","text":"<p>GitHub - GitHub Actions documentation</p> <p>Black - Getting started</p> <p>Flake8 - Quickstart</p> <p>Mypy - Getting started</p> <p>Isort - Installing and using <code>isort</code></p> <p>Atlassian - Git hooks</p>"},{"location":"resources/references/#pre-commit","title":"CI/CD - Pre-commit","text":""},{"location":"resources/references/#cicd-testing","title":"Further reading","text":"<p>GitHub - Using workflows</p>"},{"location":"resources/references/#cicd-testing","title":"CI/CD - Testing","text":""},{"location":"resources/references/#cicd-publishing","title":"Further reading","text":"<p>GitHub - Collaborating with pull requests</p> <p>GitHub - About pull requests</p> <p>Atlassian - Trunk-based development</p> <p>Developers - Trunk-based development vs Git Flow</p>"},{"location":"resources/references/#cicd-publishing","title":"CI/CD - Publishing","text":""},{"location":"resources/slides/","title":"Slides","text":"<p>These slides were put together as part of the Packaging and Publishing Python Software for Research.</p> <ul> <li> <p> 1 Introduction</p> </li> <li> <p> 2 Version Control</p> </li> <li> <p> 3 Poetry</p> </li> <li> <p> 4 Testing</p> </li> <li> <p> 5 Documentation</p> </li> </ul>"}]}